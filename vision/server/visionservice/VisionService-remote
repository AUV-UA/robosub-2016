#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from visionservice import VisionService
from visionservice.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  string getOpenCVVersion()')
  print('   getConnectedCameras()')
  print('   getFilterList()')
  print('  Output getImage(InputSource source)')
  print('  Output getScaledImage(InputSource source, Resolution resolution)')
  print('  Output applyFilter(Filter filter)')
  print('  Output applyFilterChain( filters)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = VisionService.Client(protocol)
transport.open()

if cmd == 'getOpenCVVersion':
  if len(args) != 0:
    print('getOpenCVVersion requires 0 args')
    sys.exit(1)
  pp.pprint(client.getOpenCVVersion())

elif cmd == 'getConnectedCameras':
  if len(args) != 0:
    print('getConnectedCameras requires 0 args')
    sys.exit(1)
  pp.pprint(client.getConnectedCameras())

elif cmd == 'getFilterList':
  if len(args) != 0:
    print('getFilterList requires 0 args')
    sys.exit(1)
  pp.pprint(client.getFilterList())

elif cmd == 'getImage':
  if len(args) != 1:
    print('getImage requires 1 args')
    sys.exit(1)
  pp.pprint(client.getImage(eval(args[0]),))

elif cmd == 'getScaledImage':
  if len(args) != 2:
    print('getScaledImage requires 2 args')
    sys.exit(1)
  pp.pprint(client.getScaledImage(eval(args[0]),eval(args[1]),))

elif cmd == 'applyFilter':
  if len(args) != 1:
    print('applyFilter requires 1 args')
    sys.exit(1)
  pp.pprint(client.applyFilter(eval(args[0]),))

elif cmd == 'applyFilterChain':
  if len(args) != 1:
    print('applyFilterChain requires 1 args')
    sys.exit(1)
  pp.pprint(client.applyFilterChain(eval(args[0]),))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
