/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.auvua.visionservice;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-10-18")
public class Camera implements org.apache.thrift.TBase<Camera, Camera._Fields>, java.io.Serializable, Cloneable, Comparable<Camera> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Camera");

  private static final org.apache.thrift.protocol.TField DEVICE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField RESOLUTION_FIELD_DESC = new org.apache.thrift.protocol.TField("resolution", org.apache.thrift.protocol.TType.STRUCT, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CameraStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CameraTupleSchemeFactory());
  }

  public String deviceName; // required
  public Resolution resolution; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DEVICE_NAME((short)1, "deviceName"),
    RESOLUTION((short)10, "resolution");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DEVICE_NAME
          return DEVICE_NAME;
        case 10: // RESOLUTION
          return RESOLUTION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.RESOLUTION};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DEVICE_NAME, new org.apache.thrift.meta_data.FieldMetaData("deviceName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESOLUTION, new org.apache.thrift.meta_data.FieldMetaData("resolution", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Resolution.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Camera.class, metaDataMap);
  }

  public Camera() {
  }

  public Camera(
    String deviceName)
  {
    this();
    this.deviceName = deviceName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Camera(Camera other) {
    if (other.isSetDeviceName()) {
      this.deviceName = other.deviceName;
    }
    if (other.isSetResolution()) {
      this.resolution = new Resolution(other.resolution);
    }
  }

  public Camera deepCopy() {
    return new Camera(this);
  }

  @Override
  public void clear() {
    this.deviceName = null;
    this.resolution = null;
  }

  public String getDeviceName() {
    return this.deviceName;
  }

  public Camera setDeviceName(String deviceName) {
    this.deviceName = deviceName;
    return this;
  }

  public void unsetDeviceName() {
    this.deviceName = null;
  }

  /** Returns true if field deviceName is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceName() {
    return this.deviceName != null;
  }

  public void setDeviceNameIsSet(boolean value) {
    if (!value) {
      this.deviceName = null;
    }
  }

  public Resolution getResolution() {
    return this.resolution;
  }

  public Camera setResolution(Resolution resolution) {
    this.resolution = resolution;
    return this;
  }

  public void unsetResolution() {
    this.resolution = null;
  }

  /** Returns true if field resolution is set (has been assigned a value) and false otherwise */
  public boolean isSetResolution() {
    return this.resolution != null;
  }

  public void setResolutionIsSet(boolean value) {
    if (!value) {
      this.resolution = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DEVICE_NAME:
      if (value == null) {
        unsetDeviceName();
      } else {
        setDeviceName((String)value);
      }
      break;

    case RESOLUTION:
      if (value == null) {
        unsetResolution();
      } else {
        setResolution((Resolution)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DEVICE_NAME:
      return getDeviceName();

    case RESOLUTION:
      return getResolution();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DEVICE_NAME:
      return isSetDeviceName();
    case RESOLUTION:
      return isSetResolution();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Camera)
      return this.equals((Camera)that);
    return false;
  }

  public boolean equals(Camera that) {
    if (that == null)
      return false;

    boolean this_present_deviceName = true && this.isSetDeviceName();
    boolean that_present_deviceName = true && that.isSetDeviceName();
    if (this_present_deviceName || that_present_deviceName) {
      if (!(this_present_deviceName && that_present_deviceName))
        return false;
      if (!this.deviceName.equals(that.deviceName))
        return false;
    }

    boolean this_present_resolution = true && this.isSetResolution();
    boolean that_present_resolution = true && that.isSetResolution();
    if (this_present_resolution || that_present_resolution) {
      if (!(this_present_resolution && that_present_resolution))
        return false;
      if (!this.resolution.equals(that.resolution))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_deviceName = true && (isSetDeviceName());
    list.add(present_deviceName);
    if (present_deviceName)
      list.add(deviceName);

    boolean present_resolution = true && (isSetResolution());
    list.add(present_resolution);
    if (present_resolution)
      list.add(resolution);

    return list.hashCode();
  }

  @Override
  public int compareTo(Camera other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDeviceName()).compareTo(other.isSetDeviceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceName, other.deviceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResolution()).compareTo(other.isSetResolution());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResolution()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resolution, other.resolution);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Camera(");
    boolean first = true;

    sb.append("deviceName:");
    if (this.deviceName == null) {
      sb.append("null");
    } else {
      sb.append(this.deviceName);
    }
    first = false;
    if (isSetResolution()) {
      if (!first) sb.append(", ");
      sb.append("resolution:");
      if (this.resolution == null) {
        sb.append("null");
      } else {
        sb.append(this.resolution);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (deviceName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'deviceName' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (resolution != null) {
      resolution.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CameraStandardSchemeFactory implements SchemeFactory {
    public CameraStandardScheme getScheme() {
      return new CameraStandardScheme();
    }
  }

  private static class CameraStandardScheme extends StandardScheme<Camera> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Camera struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DEVICE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deviceName = iprot.readString();
              struct.setDeviceNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // RESOLUTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.resolution = new Resolution();
              struct.resolution.read(iprot);
              struct.setResolutionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Camera struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.deviceName != null) {
        oprot.writeFieldBegin(DEVICE_NAME_FIELD_DESC);
        oprot.writeString(struct.deviceName);
        oprot.writeFieldEnd();
      }
      if (struct.resolution != null) {
        if (struct.isSetResolution()) {
          oprot.writeFieldBegin(RESOLUTION_FIELD_DESC);
          struct.resolution.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CameraTupleSchemeFactory implements SchemeFactory {
    public CameraTupleScheme getScheme() {
      return new CameraTupleScheme();
    }
  }

  private static class CameraTupleScheme extends TupleScheme<Camera> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Camera struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.deviceName);
      BitSet optionals = new BitSet();
      if (struct.isSetResolution()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetResolution()) {
        struct.resolution.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Camera struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.deviceName = iprot.readString();
      struct.setDeviceNameIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.resolution = new Resolution();
        struct.resolution.read(iprot);
        struct.setResolutionIsSet(true);
      }
    }
  }

}

