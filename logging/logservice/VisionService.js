//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./VisionService_types');
//HELPER FUNCTIONS AND STRUCTURES

VisionService_getOpenCVVersion_args = function(args) {
};
VisionService_getOpenCVVersion_args.prototype = {};
VisionService_getOpenCVVersion_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VisionService_getOpenCVVersion_args.prototype.write = function(output) {
  output.writeStructBegin('VisionService_getOpenCVVersion_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

VisionService_getOpenCVVersion_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
VisionService_getOpenCVVersion_result.prototype = {};
VisionService_getOpenCVVersion_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VisionService_getOpenCVVersion_result.prototype.write = function(output) {
  output.writeStructBegin('VisionService_getOpenCVVersion_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

VisionService_getConnectedCameras_args = function(args) {
};
VisionService_getConnectedCameras_args.prototype = {};
VisionService_getConnectedCameras_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VisionService_getConnectedCameras_args.prototype.write = function(output) {
  output.writeStructBegin('VisionService_getConnectedCameras_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

VisionService_getConnectedCameras_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Camera]);
    }
  }
};
VisionService_getConnectedCameras_result.prototype = {};
VisionService_getConnectedCameras_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size20 = 0;
        var _rtmp324;
        this.success = [];
        var _etype23 = 0;
        _rtmp324 = input.readListBegin();
        _etype23 = _rtmp324.etype;
        _size20 = _rtmp324.size;
        for (var _i25 = 0; _i25 < _size20; ++_i25)
        {
          var elem26 = null;
          elem26 = new ttypes.Camera();
          elem26.read(input);
          this.success.push(elem26);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VisionService_getConnectedCameras_result.prototype.write = function(output) {
  output.writeStructBegin('VisionService_getConnectedCameras_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter27 in this.success)
    {
      if (this.success.hasOwnProperty(iter27))
      {
        iter27 = this.success[iter27];
        iter27.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

VisionService_getFilterList_args = function(args) {
};
VisionService_getFilterList_args.prototype = {};
VisionService_getFilterList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VisionService_getFilterList_args.prototype.write = function(output) {
  output.writeStructBegin('VisionService_getFilterList_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

VisionService_getFilterList_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
  }
};
VisionService_getFilterList_result.prototype = {};
VisionService_getFilterList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size28 = 0;
        var _rtmp332;
        this.success = [];
        var _etype31 = 0;
        _rtmp332 = input.readListBegin();
        _etype31 = _rtmp332.etype;
        _size28 = _rtmp332.size;
        for (var _i33 = 0; _i33 < _size28; ++_i33)
        {
          var elem34 = null;
          elem34 = input.readString();
          this.success.push(elem34);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VisionService_getFilterList_result.prototype.write = function(output) {
  output.writeStructBegin('VisionService_getFilterList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter35 in this.success)
    {
      if (this.success.hasOwnProperty(iter35))
      {
        iter35 = this.success[iter35];
        output.writeString(iter35);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

VisionService_getImage_args = function(args) {
  this.source = null;
  if (args) {
    if (args.source !== undefined && args.source !== null) {
      this.source = new ttypes.InputSource(args.source);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field source is unset!');
    }
  }
};
VisionService_getImage_args.prototype = {};
VisionService_getImage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.source = new ttypes.InputSource();
        this.source.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VisionService_getImage_args.prototype.write = function(output) {
  output.writeStructBegin('VisionService_getImage_args');
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRUCT, 1);
    this.source.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

VisionService_getImage_result = function(args) {
  this.success = null;
  this.snf = null;
  if (args instanceof ttypes.SourceNotFound) {
    this.snf = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Output(args.success);
    }
    if (args.snf !== undefined && args.snf !== null) {
      this.snf = args.snf;
    }
  }
};
VisionService_getImage_result.prototype = {};
VisionService_getImage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Output();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.snf = new ttypes.SourceNotFound();
        this.snf.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VisionService_getImage_result.prototype.write = function(output) {
  output.writeStructBegin('VisionService_getImage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.snf !== null && this.snf !== undefined) {
    output.writeFieldBegin('snf', Thrift.Type.STRUCT, 1);
    this.snf.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

VisionService_getScaledImage_args = function(args) {
  this.source = null;
  this.resolution = null;
  if (args) {
    if (args.source !== undefined && args.source !== null) {
      this.source = new ttypes.InputSource(args.source);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field source is unset!');
    }
    if (args.resolution !== undefined && args.resolution !== null) {
      this.resolution = new ttypes.Resolution(args.resolution);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field resolution is unset!');
    }
  }
};
VisionService_getScaledImage_args.prototype = {};
VisionService_getScaledImage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.source = new ttypes.InputSource();
        this.source.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.resolution = new ttypes.Resolution();
        this.resolution.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VisionService_getScaledImage_args.prototype.write = function(output) {
  output.writeStructBegin('VisionService_getScaledImage_args');
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRUCT, 1);
    this.source.write(output);
    output.writeFieldEnd();
  }
  if (this.resolution !== null && this.resolution !== undefined) {
    output.writeFieldBegin('resolution', Thrift.Type.STRUCT, 2);
    this.resolution.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

VisionService_getScaledImage_result = function(args) {
  this.success = null;
  this.snf = null;
  if (args instanceof ttypes.SourceNotFound) {
    this.snf = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Output(args.success);
    }
    if (args.snf !== undefined && args.snf !== null) {
      this.snf = args.snf;
    }
  }
};
VisionService_getScaledImage_result.prototype = {};
VisionService_getScaledImage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Output();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.snf = new ttypes.SourceNotFound();
        this.snf.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VisionService_getScaledImage_result.prototype.write = function(output) {
  output.writeStructBegin('VisionService_getScaledImage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.snf !== null && this.snf !== undefined) {
    output.writeFieldBegin('snf', Thrift.Type.STRUCT, 1);
    this.snf.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

VisionService_applyFilter_args = function(args) {
  this.filter = null;
  if (args) {
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new ttypes.Filter(args.filter);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field filter is unset!');
    }
  }
};
VisionService_applyFilter_args.prototype = {};
VisionService_applyFilter_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new ttypes.Filter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VisionService_applyFilter_args.prototype.write = function(output) {
  output.writeStructBegin('VisionService_applyFilter_args');
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 1);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

VisionService_applyFilter_result = function(args) {
  this.success = null;
  this.snf = null;
  if (args instanceof ttypes.SourceNotFound) {
    this.snf = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Output(args.success);
    }
    if (args.snf !== undefined && args.snf !== null) {
      this.snf = args.snf;
    }
  }
};
VisionService_applyFilter_result.prototype = {};
VisionService_applyFilter_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Output();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.snf = new ttypes.SourceNotFound();
        this.snf.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VisionService_applyFilter_result.prototype.write = function(output) {
  output.writeStructBegin('VisionService_applyFilter_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.snf !== null && this.snf !== undefined) {
    output.writeFieldBegin('snf', Thrift.Type.STRUCT, 1);
    this.snf.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

VisionService_applyFilterChain_args = function(args) {
  this.filters = null;
  if (args) {
    if (args.filters !== undefined && args.filters !== null) {
      this.filters = Thrift.copyList(args.filters, [ttypes.Filter]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field filters is unset!');
    }
  }
};
VisionService_applyFilterChain_args.prototype = {};
VisionService_applyFilterChain_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size36 = 0;
        var _rtmp340;
        this.filters = [];
        var _etype39 = 0;
        _rtmp340 = input.readListBegin();
        _etype39 = _rtmp340.etype;
        _size36 = _rtmp340.size;
        for (var _i41 = 0; _i41 < _size36; ++_i41)
        {
          var elem42 = null;
          elem42 = new ttypes.Filter();
          elem42.read(input);
          this.filters.push(elem42);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VisionService_applyFilterChain_args.prototype.write = function(output) {
  output.writeStructBegin('VisionService_applyFilterChain_args');
  if (this.filters !== null && this.filters !== undefined) {
    output.writeFieldBegin('filters', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.filters.length);
    for (var iter43 in this.filters)
    {
      if (this.filters.hasOwnProperty(iter43))
      {
        iter43 = this.filters[iter43];
        iter43.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

VisionService_applyFilterChain_result = function(args) {
  this.success = null;
  this.snf = null;
  if (args instanceof ttypes.SourceNotFound) {
    this.snf = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Output(args.success);
    }
    if (args.snf !== undefined && args.snf !== null) {
      this.snf = args.snf;
    }
  }
};
VisionService_applyFilterChain_result.prototype = {};
VisionService_applyFilterChain_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Output();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.snf = new ttypes.SourceNotFound();
        this.snf.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VisionService_applyFilterChain_result.prototype.write = function(output) {
  output.writeStructBegin('VisionService_applyFilterChain_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.snf !== null && this.snf !== undefined) {
    output.writeFieldBegin('snf', Thrift.Type.STRUCT, 1);
    this.snf.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

VisionServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
VisionServiceClient.prototype = {};
VisionServiceClient.prototype.seqid = function() { return this._seqid; }
VisionServiceClient.prototype.new_seqid = function() { return this._seqid += 1; }
VisionServiceClient.prototype.getOpenCVVersion = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getOpenCVVersion();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getOpenCVVersion();
  }
};

VisionServiceClient.prototype.send_getOpenCVVersion = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getOpenCVVersion', Thrift.MessageType.CALL, this.seqid());
  var args = new VisionService_getOpenCVVersion_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

VisionServiceClient.prototype.recv_getOpenCVVersion = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new VisionService_getOpenCVVersion_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getOpenCVVersion failed: unknown result');
};
VisionServiceClient.prototype.getConnectedCameras = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getConnectedCameras();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getConnectedCameras();
  }
};

VisionServiceClient.prototype.send_getConnectedCameras = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getConnectedCameras', Thrift.MessageType.CALL, this.seqid());
  var args = new VisionService_getConnectedCameras_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

VisionServiceClient.prototype.recv_getConnectedCameras = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new VisionService_getConnectedCameras_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getConnectedCameras failed: unknown result');
};
VisionServiceClient.prototype.getFilterList = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getFilterList();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getFilterList();
  }
};

VisionServiceClient.prototype.send_getFilterList = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getFilterList', Thrift.MessageType.CALL, this.seqid());
  var args = new VisionService_getFilterList_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

VisionServiceClient.prototype.recv_getFilterList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new VisionService_getFilterList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getFilterList failed: unknown result');
};
VisionServiceClient.prototype.getImage = function(source, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getImage(source);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getImage(source);
  }
};

VisionServiceClient.prototype.send_getImage = function(source) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getImage', Thrift.MessageType.CALL, this.seqid());
  var args = new VisionService_getImage_args();
  args.source = source;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

VisionServiceClient.prototype.recv_getImage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new VisionService_getImage_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.snf) {
    return callback(result.snf);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getImage failed: unknown result');
};
VisionServiceClient.prototype.getScaledImage = function(source, resolution, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getScaledImage(source, resolution);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getScaledImage(source, resolution);
  }
};

VisionServiceClient.prototype.send_getScaledImage = function(source, resolution) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getScaledImage', Thrift.MessageType.CALL, this.seqid());
  var args = new VisionService_getScaledImage_args();
  args.source = source;
  args.resolution = resolution;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

VisionServiceClient.prototype.recv_getScaledImage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new VisionService_getScaledImage_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.snf) {
    return callback(result.snf);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getScaledImage failed: unknown result');
};
VisionServiceClient.prototype.applyFilter = function(filter, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_applyFilter(filter);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_applyFilter(filter);
  }
};

VisionServiceClient.prototype.send_applyFilter = function(filter) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('applyFilter', Thrift.MessageType.CALL, this.seqid());
  var args = new VisionService_applyFilter_args();
  args.filter = filter;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

VisionServiceClient.prototype.recv_applyFilter = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new VisionService_applyFilter_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.snf) {
    return callback(result.snf);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('applyFilter failed: unknown result');
};
VisionServiceClient.prototype.applyFilterChain = function(filters, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_applyFilterChain(filters);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_applyFilterChain(filters);
  }
};

VisionServiceClient.prototype.send_applyFilterChain = function(filters) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('applyFilterChain', Thrift.MessageType.CALL, this.seqid());
  var args = new VisionService_applyFilterChain_args();
  args.filters = filters;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

VisionServiceClient.prototype.recv_applyFilterChain = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new VisionService_applyFilterChain_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.snf) {
    return callback(result.snf);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('applyFilterChain failed: unknown result');
};
VisionServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
VisionServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

VisionServiceProcessor.prototype.process_getOpenCVVersion = function(seqid, input, output) {
  var args = new VisionService_getOpenCVVersion_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getOpenCVVersion.length === 0) {
    Q.fcall(this._handler.getOpenCVVersion)
      .then(function(result) {
        var result = new VisionService_getOpenCVVersion_result({success: result});
        output.writeMessageBegin("getOpenCVVersion", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getOpenCVVersion", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getOpenCVVersion(function (err, result) {
      if (err == null) {
        var result = new VisionService_getOpenCVVersion_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getOpenCVVersion", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getOpenCVVersion", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

VisionServiceProcessor.prototype.process_getConnectedCameras = function(seqid, input, output) {
  var args = new VisionService_getConnectedCameras_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getConnectedCameras.length === 0) {
    Q.fcall(this._handler.getConnectedCameras)
      .then(function(result) {
        var result = new VisionService_getConnectedCameras_result({success: result});
        output.writeMessageBegin("getConnectedCameras", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getConnectedCameras", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getConnectedCameras(function (err, result) {
      if (err == null) {
        var result = new VisionService_getConnectedCameras_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getConnectedCameras", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getConnectedCameras", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

VisionServiceProcessor.prototype.process_getFilterList = function(seqid, input, output) {
  var args = new VisionService_getFilterList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getFilterList.length === 0) {
    Q.fcall(this._handler.getFilterList)
      .then(function(result) {
        var result = new VisionService_getFilterList_result({success: result});
        output.writeMessageBegin("getFilterList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getFilterList", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getFilterList(function (err, result) {
      if (err == null) {
        var result = new VisionService_getFilterList_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getFilterList", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getFilterList", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

VisionServiceProcessor.prototype.process_getImage = function(seqid, input, output) {
  var args = new VisionService_getImage_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getImage.length === 1) {
    Q.fcall(this._handler.getImage, args.source)
      .then(function(result) {
        var result = new VisionService_getImage_result({success: result});
        output.writeMessageBegin("getImage", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.SourceNotFound) {
          var result = new VisionService_getImage_result(err);
          output.writeMessageBegin("getImage", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getImage", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getImage(args.source, function (err, result) {
      if (err == null || err instanceof ttypes.SourceNotFound) {
        var result = new VisionService_getImage_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getImage", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getImage", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

VisionServiceProcessor.prototype.process_getScaledImage = function(seqid, input, output) {
  var args = new VisionService_getScaledImage_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getScaledImage.length === 2) {
    Q.fcall(this._handler.getScaledImage, args.source, args.resolution)
      .then(function(result) {
        var result = new VisionService_getScaledImage_result({success: result});
        output.writeMessageBegin("getScaledImage", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.SourceNotFound) {
          var result = new VisionService_getScaledImage_result(err);
          output.writeMessageBegin("getScaledImage", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getScaledImage", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getScaledImage(args.source, args.resolution, function (err, result) {
      if (err == null || err instanceof ttypes.SourceNotFound) {
        var result = new VisionService_getScaledImage_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getScaledImage", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getScaledImage", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

VisionServiceProcessor.prototype.process_applyFilter = function(seqid, input, output) {
  var args = new VisionService_applyFilter_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.applyFilter.length === 1) {
    Q.fcall(this._handler.applyFilter, args.filter)
      .then(function(result) {
        var result = new VisionService_applyFilter_result({success: result});
        output.writeMessageBegin("applyFilter", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.SourceNotFound) {
          var result = new VisionService_applyFilter_result(err);
          output.writeMessageBegin("applyFilter", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("applyFilter", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.applyFilter(args.filter, function (err, result) {
      if (err == null || err instanceof ttypes.SourceNotFound) {
        var result = new VisionService_applyFilter_result((err != null ? err : {success: result}));
        output.writeMessageBegin("applyFilter", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("applyFilter", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

VisionServiceProcessor.prototype.process_applyFilterChain = function(seqid, input, output) {
  var args = new VisionService_applyFilterChain_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.applyFilterChain.length === 1) {
    Q.fcall(this._handler.applyFilterChain, args.filters)
      .then(function(result) {
        var result = new VisionService_applyFilterChain_result({success: result});
        output.writeMessageBegin("applyFilterChain", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.SourceNotFound) {
          var result = new VisionService_applyFilterChain_result(err);
          output.writeMessageBegin("applyFilterChain", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("applyFilterChain", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.applyFilterChain(args.filters, function (err, result) {
      if (err == null || err instanceof ttypes.SourceNotFound) {
        var result = new VisionService_applyFilterChain_result((err != null ? err : {success: result}));
        output.writeMessageBegin("applyFilterChain", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("applyFilterChain", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

