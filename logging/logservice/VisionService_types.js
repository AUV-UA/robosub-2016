//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
ttypes.ImageSourceType = {
  'IMAGE' : 0,
  'VIDEO' : 1,
  'DEVICE' : 2,
  'STREAM' : 3
};
ttypes.FilterSourceType = {
  'RGB' : 0,
  'BGR' : 1,
  'HSV' : 2,
  'HSL' : 3,
  'BINARY' : 4
};
ttypes.FilterSinkType = {
  'RGB' : 0,
  'BGR' : 1,
  'HSV' : 2,
  'HSL' : 3,
  'BINARY' : 4,
  'MAP' : 5
};
SourceNotFound = module.exports.SourceNotFound = function(args) {
  Thrift.TException.call(this, "SourceNotFound")
  this.name = "SourceNotFound"
  this.path = null;
  if (args) {
    if (args.path !== undefined && args.path !== null) {
      this.path = args.path;
    }
  }
};
Thrift.inherits(SourceNotFound, Thrift.TException);
SourceNotFound.prototype.name = 'SourceNotFound';
SourceNotFound.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SourceNotFound.prototype.write = function(output) {
  output.writeStructBegin('SourceNotFound');
  if (this.path !== null && this.path !== undefined) {
    output.writeFieldBegin('path', Thrift.Type.STRING, 1);
    output.writeString(this.path);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

InputSource = module.exports.InputSource = function(args) {
  this.source = null;
  this.path = null;
  if (args) {
    if (args.source !== undefined && args.source !== null) {
      this.source = args.source;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field source is unset!');
    }
    if (args.path !== undefined && args.path !== null) {
      this.path = args.path;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field path is unset!');
    }
  }
};
InputSource.prototype = {};
InputSource.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.source = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InputSource.prototype.write = function(output) {
  output.writeStructBegin('InputSource');
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.I32, 1);
    output.writeI32(this.source);
    output.writeFieldEnd();
  }
  if (this.path !== null && this.path !== undefined) {
    output.writeFieldBegin('path', Thrift.Type.STRING, 2);
    output.writeString(this.path);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Output = module.exports.Output = function(args) {
  this.imagePath = null;
  this.data = null;
  this.computeTime = null;
  if (args) {
    if (args.imagePath !== undefined && args.imagePath !== null) {
      this.imagePath = args.imagePath;
    }
    if (args.data !== undefined && args.data !== null) {
      this.data = Thrift.copyMap(args.data, [null]);
    }
    if (args.computeTime !== undefined && args.computeTime !== null) {
      this.computeTime = args.computeTime;
    }
  }
};
Output.prototype = {};
Output.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.imagePath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.data = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var key6 = null;
          var val7 = null;
          key6 = input.readString();
          val7 = input.readDouble();
          this.data[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.computeTime = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Output.prototype.write = function(output) {
  output.writeStructBegin('Output');
  if (this.imagePath !== null && this.imagePath !== undefined) {
    output.writeFieldBegin('imagePath', Thrift.Type.STRING, 1);
    output.writeString(this.imagePath);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.DOUBLE, Thrift.objectLength(this.data));
    for (var kiter8 in this.data)
    {
      if (this.data.hasOwnProperty(kiter8))
      {
        var viter9 = this.data[kiter8];
        output.writeString(kiter8);
        output.writeDouble(viter9);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.computeTime !== null && this.computeTime !== undefined) {
    output.writeFieldBegin('computeTime', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.computeTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Filter = module.exports.Filter = function(args) {
  this.sourceType = null;
  this.sinkType = null;
  this.filter = null;
  this.params = null;
  if (args) {
    if (args.sourceType !== undefined && args.sourceType !== null) {
      this.sourceType = args.sourceType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sourceType is unset!');
    }
    if (args.sinkType !== undefined && args.sinkType !== null) {
      this.sinkType = args.sinkType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sinkType is unset!');
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = args.filter;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field filter is unset!');
    }
    if (args.params !== undefined && args.params !== null) {
      this.params = Thrift.copyMap(args.params, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field params is unset!');
    }
  }
};
Filter.prototype = {};
Filter.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.sourceType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.sinkType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.filter = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size10 = 0;
        var _rtmp314;
        this.params = {};
        var _ktype11 = 0;
        var _vtype12 = 0;
        _rtmp314 = input.readMapBegin();
        _ktype11 = _rtmp314.ktype;
        _vtype12 = _rtmp314.vtype;
        _size10 = _rtmp314.size;
        for (var _i15 = 0; _i15 < _size10; ++_i15)
        {
          var key16 = null;
          var val17 = null;
          key16 = input.readString();
          val17 = input.readDouble();
          this.params[key16] = val17;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Filter.prototype.write = function(output) {
  output.writeStructBegin('Filter');
  if (this.sourceType !== null && this.sourceType !== undefined) {
    output.writeFieldBegin('sourceType', Thrift.Type.I32, 1);
    output.writeI32(this.sourceType);
    output.writeFieldEnd();
  }
  if (this.sinkType !== null && this.sinkType !== undefined) {
    output.writeFieldBegin('sinkType', Thrift.Type.I32, 2);
    output.writeI32(this.sinkType);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRING, 3);
    output.writeString(this.filter);
    output.writeFieldEnd();
  }
  if (this.params !== null && this.params !== undefined) {
    output.writeFieldBegin('params', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.DOUBLE, Thrift.objectLength(this.params));
    for (var kiter18 in this.params)
    {
      if (this.params.hasOwnProperty(kiter18))
      {
        var viter19 = this.params[kiter18];
        output.writeString(kiter18);
        output.writeDouble(viter19);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Resolution = module.exports.Resolution = function(args) {
  this.horizontal = null;
  this.vertical = null;
  if (args) {
    if (args.horizontal !== undefined && args.horizontal !== null) {
      this.horizontal = args.horizontal;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field horizontal is unset!');
    }
    if (args.vertical !== undefined && args.vertical !== null) {
      this.vertical = args.vertical;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field vertical is unset!');
    }
  }
};
Resolution.prototype = {};
Resolution.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.horizontal = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.vertical = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Resolution.prototype.write = function(output) {
  output.writeStructBegin('Resolution');
  if (this.horizontal !== null && this.horizontal !== undefined) {
    output.writeFieldBegin('horizontal', Thrift.Type.I32, 1);
    output.writeI32(this.horizontal);
    output.writeFieldEnd();
  }
  if (this.vertical !== null && this.vertical !== undefined) {
    output.writeFieldBegin('vertical', Thrift.Type.I32, 2);
    output.writeI32(this.vertical);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Camera = module.exports.Camera = function(args) {
  this.deviceName = null;
  this.resolution = null;
  if (args) {
    if (args.deviceName !== undefined && args.deviceName !== null) {
      this.deviceName = args.deviceName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceName is unset!');
    }
    if (args.resolution !== undefined && args.resolution !== null) {
      this.resolution = new ttypes.Resolution(args.resolution);
    }
  }
};
Camera.prototype = {};
Camera.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.deviceName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.resolution = new ttypes.Resolution();
        this.resolution.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Camera.prototype.write = function(output) {
  output.writeStructBegin('Camera');
  if (this.deviceName !== null && this.deviceName !== undefined) {
    output.writeFieldBegin('deviceName', Thrift.Type.STRING, 1);
    output.writeString(this.deviceName);
    output.writeFieldEnd();
  }
  if (this.resolution !== null && this.resolution !== undefined) {
    output.writeFieldBegin('resolution', Thrift.Type.STRUCT, 10);
    this.resolution.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ttypes.version = '0.1.0';
